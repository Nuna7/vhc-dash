:root {
	--off-white: #aaaaaa;
	--black: #111111;
	--dark-gray: #444444;
	--light-gray: #777777;
	--red: #9e2a2b;
	--green: #226f54;

	--bg: var(--off-white);
	--fg: var(--black);

	--std-spacing: 3rem;
	--cmp-spacing: 2rem;
	--min-spacing: 1rem;
}

* { 
	box-sizing: border-box; 
}

body {
	color: var(--fg);
	background: var(--bg);
}

:focus {
	outline: 1px dashed var(--fg);
	outline-offset: 2px;
}

::selection {
	color: var(--bg);
	background-color: var(--fg);
}

a {
	color: inherit;
}

a:focus {
	text-decoration: none;
}

h1,
h2,
h3,
h4 {
	font-weight: normal;
	line-height: 1.3em;
}

:is(h1, h2, h3, h4, p, ul, ol)+ :is(h1, h2, h3, h4) {
	margin-top: 1.2em;
}

p,
ul,
ol {
	line-height: 1.5em;
}

:is(h1, h2, h3, h4, p, ul, ol)+ :is(p, ul, ol) {
	margin-top: 1em;
}

p.mReadWidth {
	max-width: 750px;
}

ul {
	list-style-type: square;
}

.tGray {
	color: var(--dark-gray);
}

.tRed {
	color: var(--red);
}

.uNoWrap {
	white-space: nowrap;
}

.Divider {
	width: 100%;
	height: 0;
	border-top: 1px dotted var(--fg);
}

.Box {
	--box-padding: var(--min-spacing);

	border: 1px dotted var(--fg);
	padding: var(--box-padding);
	position: relative;
	background-color: var(--bg);
}

.Box.mInline {
	display: inline-block;
}

.Box.mCompact {
	--box-padding: 0.7em;
}

.Box.mRoomy {
	--box-padding: var(--cmp-spacing);
}

.Box.mInvert {
	--bg: var(--black);
	--fg: var(--off-white);

	color: var(--fg);
	border: none;
	background-color: var(--bg);
}

.Box:not(.mRoomy):has(.cLabel, .lLabel, .rLabel) {
	padding-top: calc(var(--box-padding) + 0.5em);
}

.Box> :is(.cLabel, .lLabel, .rLabel) {
	top: 0;
	padding: 0 calc(var(--box-padding) / 2);
	position: absolute;
	background-color: var(--bg);
}

.Box>.cLabel {
	left: 50%;
	transform: translate(-50%, -50%);
}

.Box>.lLabel {
	left: calc(var(--box-padding) / 2);
	transform: translateY(-50%);
}

.Box>.rLabel {
	right: calc(var(--box-padding) / 2);
	transform: translateY(-50%);
}

.Popup {
	--base-color: var(--black);
	
	top: 50%;
	left: 50%;
	padding: 1em 1.5em 1.5em 1em;
	z-index: 100;
	position: fixed;
	background-color: var(--bg);
	transform: translate(-50%, -50%);
}

.Popup > .close {
	top: -0.9em;
	right: -0.4em;
	z-index: 1;
	border: 0.5em solid var(--off-white);
	position: absolute;
	outline-offset: calc(-0.5em + 2px);
}

.Popup > div {
	--bg: var(--base-color);
	--fg: var(--off-white);

	color: var(--fg);
	position: relative;
	padding: 2em;
	outline: 1px dashed var(--base-color);
	background-color: var(--bg);
	outline-offset: 0.5em;
	box-shadow: 1em 1em color-mix(in srgb, var(--base-color) 20%, transparent);
}

.Popup > div > .content {
	max-width: 30em;
	max-height: 10em;
	overflow-y: auto;
}

.Popup.mError {
	--base-color: var(--red);
}

body:has(.Popup) #Content {
	filter: opacity(0.5);
	pointer-events: none;
}