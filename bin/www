#!/usr/bin/env node

// DEPENDENCIES ================================================================

import app from "../app.js";
import createDebug from "debug";
import http from "http";

const debug = createDebug("vhc:server");

// PORT ========================================================================

const port = normalizePort(process.env.PORT || "8080");
app.set("port", port);

// Normalize a port into a number, string, or false
function normalizePort(val) {
	var port = parseInt(val, 10);

	// named pipe
	if (isNaN(port)) return val;

	// port number
	if (port >= 0) return port;

	return false;
}

// HTTP SERVER =================================================================

const server = http.createServer(app);

// listen on provided port, on all network interfaces
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

// "error" event listener  -----------------------------------------------------
function onError(error) {
	if (error.syscall !== "listen") throw error;

	var bind = typeof port === "string"
		? "Pipe " + port
		: "Port " + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case "EACCES":
			console.error(bind + " requires elevated privileges");
			process.exit(1);
			
		case "EADDRINUSE":
			console.error(bind + " is already in use");
			process.exit(1);
			
		default: throw error;
	}
}

// "listening" event listener --------------------------------------------------
function onListening() {
	var addr = server.address();
	var bind = typeof addr === "string"
		? "pipe " + addr
		: "port " + addr.port;
	
	debug("Listening on " + bind);
}


// SIGTERM event listener ------------------------------------------------------
process.on("SIGTERM", () => {
	server.close(() => console.log("Process terminated"));
});